datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  email               String?  @unique
  username            String?  @unique
  lastActiveTimestamp DateTime @default(now())
  isAdmin             Boolean  @default(false)

  stripeId           String?   @unique
  checkoutSessionId  String?
  subscriptionStatus String? // 'active', 'canceled', 'past_due', 'deleted'
  subscriptionPlan   String? // 'hobby', 'pro'
  sendNewsletter     Boolean   @default(false)
  datePaid           DateTime?
  credits            Int       @default(3)

  gptResponses        GptResponse[]
  contactFormMessages ContactFormMessage[]
  tasks               Task[]
  files               File[]
  songs               Song[]
  playlists           Playlist[]
}

model GptResponse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  content String
}

model Task {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  description String
  time        String  @default("1")
  isDone      Boolean @default(false)
}

model File {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  name      String
  type      String
  key       String
  uploadUrl String
}

model DailyStats {
  id   Int      @id @default(autoincrement())
  date DateTime @unique @default(now())

  totalViews                Int    @default(0)
  prevDayViewsChangePercent String @default("0")
  userCount                 Int    @default(0)
  paidUserCount             Int    @default(0)
  userDelta                 Int    @default(0)
  paidUserDelta             Int    @default(0)
  totalRevenue              Float  @default(0)
  totalProfit               Float  @default(0)

  sources PageViewSource[]
}

model PageViewSource {
  name String
  date DateTime @default(now())

  dailyStats   DailyStats? @relation(fields: [dailyStatsId], references: [id])
  dailyStatsId Int?

  visitors Int

  @@id([date, name])
}

model Logs {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  message String
  level   String
}

model ContactFormMessage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  content   String
  isRead    Boolean   @default(false)
  repliedAt DateTime?
}

model Song {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title                String
  subtitle             Json? // New column to store JSON data
  imageUrl             String?
  lyric                String? @db.Text
  transcription        String? @db.Text
  audioUrl             String?
  videoUrl             String?
  modelName            String?
  status               String
  gptDescriptionPrompt String? @db.Text
  prompt               String? @db.Text
  type                 String?
  tags                 String?
  sId                  String? @unique // id from Suno
  duration             Float   @default(0) // in seconds

  user   User   @relation(fields: [userId], references: [id])
  userId String

  playlists PlaylistSong[]
}

model Playlist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  songs PlaylistSong[]
}

model PlaylistSong {
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId String
  song       Song     @relation(fields: [songId], references: [id])
  songId     String
  addedAt    DateTime @default(now())

  @@id([playlistId, songId])
}
